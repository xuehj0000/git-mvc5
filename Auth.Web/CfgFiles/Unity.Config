<configuration>
  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Unity.Configuration"/>
  </configSections>
  <!--  -->
  <unity>
    <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Unity.Interception.Configuration"/>
    <containers>
      <!--容器名称，保持与代码种的容器名称一致-->
      <container name="aopContainer">
        <extension type="Interception"/>
        <register type="System.Data.Entity.DbContext,EntityFramework" mapTo="Auth.DAL.MyDbContext,Auth.DAL" />
        <!--实例接口命名空间以及程序集；实例命名空间以及程序集-->
        <register type="Auth.Interface.ISysUserService,Auth.Interface" mapTo="Auth.Service.SysUserService,Auth.Service">
          <interceptor type="InterfaceInterceptor"/>
          <!--扩展的方法名称-->
          <!--方法异常处理-->
          <!--<interceptionBehavior type="Aborlen.AopExtension.ExceptionLoggingBehavior, Aborlen.AopExtension"/>
          --><!-- 执行缓存方法--><!--
          <interceptionBehavior type="Aborlen.AopExtension.CachingBehavior, Aborlen.AopExtension"/>
          --><!--方法执行前相关操作--><!--
          <interceptionBehavior type="Aborlen.AopExtension.LogBeforeBehavior, Aborlen.AopExtension"/>
          --><!--参数检查--><!--
          <interceptionBehavior type="Aborlen.AopExtension.ParameterCheckBehavior, Aborlen.AopExtension"/>
          --><!--方法执行后操作--><!--
          <interceptionBehavior type="Aborlen.AopExtension.LogAfterBehavior, Aborlen.AopExtension"/>-->
        </register>
      </container>
    </containers>
  </unity>
</configuration>